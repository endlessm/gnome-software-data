#!/usr/bin/python3
# Copyright Â© 2020 Endless OS Foundation LLC
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# Generator for external appstream XML
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

import argparse
import glob
import os
import subprocess
from xml.etree import ElementTree


def main():
    # Provide some basic --help output
    parser = argparse.ArgumentParser(
        description='Generate eos-extra.xml appstream from metainfo files',
    )
    parser.parse_args()

    appinfo_dir = os.path.dirname(__file__)
    metainfo_dir = os.path.join(appinfo_dir, 'metainfo')

    catalog = ElementTree.Element("components", version="0.8", origin="eos-extra")
    metainfo_paths = sorted(glob.iglob(os.path.join(metainfo_dir, "*.metainfo.xml")))
    for path in metainfo_paths:
        metainfo = ElementTree.parse(path).getroot()
        catalog.append(metainfo)

    tree = ElementTree.ElementTree(catalog)
    ElementTree.indent(tree)
    appstream_path = os.path.join(appinfo_dir, "eos-extra.xml")
    tmp_appstream_path = os.path.join(appinfo_dir, "eos-extra-tmp.xml")
    tree.write(tmp_appstream_path, encoding="unicode", xml_declaration=True)

    # Validate the catalog.
    #
    # FIXME: It would be preferable to use validate-strict, but
    # currently our appstream-util doesn't know about the launchable tag
    # used in web applications. Furthermore, it would probably be better
    # to use appstreamcli validate, but that doesn't seem to understand
    # the merge="append" entries and errors on missing tags that would
    # come from the upstream appstream.
    subprocess.run(
        ['appstream-util', 'validate', '--nonet', tmp_appstream_path],
        check=True,
    )

    # Update the real appstream.
    os.rename(tmp_appstream_path, appstream_path)


if __name__ == "__main__":
    main()
